@page "/sb"

<h2>Simple Binding Value - "One Way Binding"</h2>
<div class="card">
    <h5 class="card-header">This is the parent control</h5>
    <div class="card-body">
        <p class="card-text">The second checkbox will also change because of the Value parameter.</p>
        <div class="form-group callout-parent @StateHasChangedCss">
            <label for="parent">Click me (parent control)</label>
            <!-- Parent level checkbox -->
            <input id="parent" type="checkbox" bind="@ParentValue"/>
            <!-- /Parent level checkbox -->
        </div>

        <DisplayCode Code="@(new[]{"<input id='parent' type='checkbox' bind='@ParentValue' />"})"/>
    </div>
</div>
<div class="card">
    <h5 class="card-header">This is the Child control</h5>
    <div class="card-body">
        <p class="card-text">Try clicking the checkbox - it will <b class="text-danger">not</b> update the parent Value.</p>
        <div class="form-group callout-child @StateHasChangedCss">
            <!-- Child level checkbox -->
            <CheckBox3 Value="@ParentValue" />
            <!-- /Child level checkbox -->
        </div>
        <DisplayCode Code="@(new[]{
            "<CheckBox3 Value=\"@ParentValue\" />",
            })"/>
        <p class=" card-text">
            The CheckBox3 implementation : </p>
        <DisplayCode Code="@(new[]{
            "<input type=\"checkbox\" bind=\"@Value\" />",
            })"/>
        <DisplayCode Language="CSharp" Code="@(new[]{
            "@functions {",
            "  [Parameter] protected bool Value { get; set; }",
            "}",
            })"/>
    </div>
</div>
<div class="card">
    <h5 class="card-header">Invoking StateHasChanged</h5>
    <div class="card-body">
        <div class="row">
            <div class="col-sm-4">
                <div class="alert alert-info">
                    <span class="@StateHasChangedCss">Last refresh @DateTime.Now</span>
                </div>
            </div>
            <div class="col-sm-8">
                <button id="refresh" onclick="@Refresh" class="btn btn-standard">Refresh</button>
            </div>
        </div>
        <p class="card-text">
            Page implementation:
        </p>
        <p class="card-text">
            Now click the button to refresh this page - nothing will change except the Last Refresh time, because the Value parameter is a one-way binding.
        </p>
        <DisplayCode Code="@(new[]{
            "<button id=\"refresh\" onclick=\"@Refresh\" class=\"btn btn-standard\">Refresh</button>",
            })" />
        <DisplayCode Language="CSharp" Code="@(new[]{
            "@functions {",
            "bool ParentValue;",
            "void Refresh(UIMouseEventArgs args) => StateHasChanged();",
            "}",
            })"/>
    </div>
</div>

@functions
{
  bool ParentValue;
  void Refresh(UIMouseEventArgs args) => StateHasChanged();
  string StateHasChangedCss => ParentValue ? "ping-on" : "ping-off";
}
