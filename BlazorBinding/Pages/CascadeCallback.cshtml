@page "/cc"
@inherits CascadeCallbackModel

<h2>Cascading Value With Callback - "Two Way Binding"</h2>
<div class="card">
    <h5 class="card-header">This is the parent control</h5>
    <div class="card-body">
        <p class="card-text">Try clicking the checkbox - the second checkbox will also change because of the CascadingValue.</p>
        <div class="form-group callout-parent @StateHasChangedCss">
            <label for="parent">Click me (parent control)</label>
            <!-- Parent level checkbox -->
            <input id="parent" type="checkbox" bind="@ParentValue" />
            <!-- /Parent level checkbox -->
        </div>
@ClearSamples()
        @AddCodeSample(1,"<input id='parent' type='checkbox' bind='@ParentValue' />")
        <DisplayCode Language="HTML" Code=@CodeSample[1]/>
    </div>
</div>

<div class="card" >
    <h5 class="card-header">This is the Child control</h5>
    <div class="card-body">
        <p class="card-text">This is the child control, try clicking the checkbox - <i>it will update the parent Value.</i></p>
        <div class="form-group callout-child @StateHasChangedCss">
            <!-- Child Level Checkbox -->
            <CascadingValue Name="ParentValue" Value="@this">
               <CheckBox2 Callback="UpdateValue"/>
            </CascadingValue>
            <!-- /Child Level Checkbox -->
        </div>
        @AddCodeSample(2, "<CascadingValue Name=\"ParentValue\" Value=\"@ParentValue\">")
        @AddCodeSample(2, "   <CheckBox2 Callback=\"UpdateValue\"/>")
        @AddCodeSample(2, "</CascadingValue>")
        <DisplayCode Language="html" Code=@CodeSample[2] />

        <p class="card-text">
            The CheckBox2 implementation :
        </p>
        <p class="card-text">
            Here we bind to a local proxy value so we can fire the Callback when the local value changes
        </p>
        @AddCodeSample(3, "<input type='checkbox' bind='@Value' />")
        @AddCodeSample(4, "@functions")
        @AddCodeSample(4, "{")
        @AddCodeSample(4, " [Parameter] protected Action<bool> Callback { get; set; }")
        @AddCodeSample(4, " [CascadingParameter(Name =\"ParentValue\")] bool ParentValue { get; set; }")
        @AddCodeSample(4, " bool Value { get { return ParentValue; } set { Callback?.Invoke(value); } }")
        @AddCodeSample(4, "}")
        <DisplayCode Language="html" Code="@CodeSample[3]" />
        <DisplayCode Language="csharp" Code="@CodeSample[4]" />
    </div>
</div>
<div class="card">
    <h5 class="card-header">Invoking StateHasChanged</h5>
    <div class="card-body">
        <div class="row">
            <div class="col-sm-4">
                <div class="alert alert-info">
                    <span class="@StateHasChangedCss">Last refresh @DateTime.Now</span>
                </div>
            </div>
            <div class="col-sm-8">
                <button id="refresh" onclick="@Refresh" class="btn btn-standard">Refresh</button>
            </div>
            <p class="card-text">
                Now click the button to refresh this page - nothing will change except the Last Refresh time, because the
                Callback has already updated this parent page.
            </p>
        </div>
        @AddCodeSample(5, "<button id=\"refresh\" onclick=\"@Refresh\" class=\"btn btn-standard\">Refresh</button>")
        <DisplayCode Language="html" Code="@CodeSample[5]" />
        <p class="card-text">
            Page implementation:
        </p>
        @AddCodeSample(6, "@functions")
        @AddCodeSample(6, "{")
        @AddCodeSample(6, " bool ParentValue;")
        @AddCodeSample(6, " void Refresh(UIMouseEventArgs args) => StateHasChanged();")
        @AddCodeSample(6, " void UpdateValue(bool value) { ParentValue = value; Refresh(null); }")
        @AddCodeSample(6, "}")

        <DisplayCode Language="csharp" Code="@CodeSample[6]" />
    </div>
</div>

<div>
    <h3>Event List (@EventList.Count)</h3>
    @GetEvents()
</div>