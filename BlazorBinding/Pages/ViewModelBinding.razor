@page "/vm"
@inherits BlazorComponentExt
<h2>View Model Binding - "Two Way Value Binding"</h2>

<div class="card">
    <h5 class="card-header">This is the parent control</h5>
    <div class="card-body">
        <p class="card-text">Try clicking the checkbox - the second checkbox will also change because of the bound Value parameter.</p>
        <div class="form-group callout-parent @StateHasChangedCss">
            <label for="parent">Click me (parent control)</label>
            <!-- Parent level checkbox -->
            <input id="parent" type="checkbox" @bind="@PageModel.Toggle" />
            <!-- /Parent level checkbox -->
        </div>
        <DisplayCode Code="@(new[]{
            "<input id=\"parent\" type=\"checkbox\" @bind=\"@PageModel.Toggle\" />"
            })"/>
    </div>
</div>

<div class="card">
    <h5 class="card-header">This is the Child control</h5>
    <div class="card-body">
        <p class="card-text">Try clicking the checkbox - it will also update the parent Value because we are using a ViewModel.</p>
        <div class="form-group callout-child @StateHasChangedCss">
            <!-- Child level checkbox -->
            <CheckBox6 @bind-Value="@PageModel.Toggle" />
            <!-- /Child level checkbox -->
        </div>
        <DisplayCode Code="@(new[]{
            " <CheckBox6 @bind-Value=\"@PageModel.Toggle\" />"
            })" />
        <p class="card-text">The CheckBox6 implementation : </p>
        <p class="card-text">We use a custom setter so we can fire the ValueChanged event when the local value changes.</p>
        <p class="card-text">Invoking the ValueChanged event is required in Blazor.</p>
        <DisplayCode Code="@(new[]{
            "<input type=\"checkbox\" @bind=\"@Value\" />",
            })" />
        <DisplayCode Language="CSharp"
                     Code="@(new[]{
            "@functions {",
            "  bool LocalValue { get { return Value; } set { ValueChanged?.Invoke(value); } }",
            "  [Parameter] protected bool Value { get; set; }",
            "  [Parameter] protected Action<bool> ValueChanged { get; set; })",
            "}",
            })" />
    </div>
</div>

<p>Page Functions</p>
        <DisplayCode Language="CSharp" 
            Code="@(new[]{
            "@functions {",
            " [Model] BlazorBinding.Models.DataModel PageModel { get; set; }",
            " void Refresh(UIMouseEventArgs args) => StateHasChanged();",
            "}",
            })"/>
@code
{

  [ModelAttribute] BlazorBinding.Models.DataModel PageModel { get; set; }
  void Refresh(UIMouseEventArgs args) => StateHasChanged();
  string StateHasChangedCss => PageModel.Toggle ? "ping-on" : "ping-off";

}
