@page "/"
@using BlazorBinding.Components.DocumentationSupport

<div class="card">
    <h1 class="card-header">Data Binding Examples</h1>
    <div class="card-body">
        <p class="card-text">
            This is a working example of various binding techniques for Blazor.
        </p>
        <p class="card-text">
            Please use the menu to work through the different options - if you work down the list, I think you will see how we have to accomodate the fact there are some <i>issues</i> in data-binding in Blazor.
        </p>
        <p class="card-text">
            The code is on GitHub <a href="https://github.com/SQL-MisterMagoo/BlazorBinding">Blazor Binding Source</a>
        </p>
    </div>
</div>


@if (ChangeLogItems != null)
{
    @foreach (var item in ChangeLogItems)
    {
        <div class="card">
            <h5 class="card-header">@item.dated.ToLongDateString()</h5>
            <div class="card-body">
                <p class="card-text">@((MarkupString)item.content)</p>
                @if (item.child != null)
                {
                    foreach (var child in item.child)
                    {
                        <div class="form-group callout-child">
                            @((MarkupString)child.text)
                    </div>
                }
            }
            </div>
        </div>
    }
}

@functions
{
  //
  [Inject] HttpClient httpClient { get; set; }
  ChangeLog[] ChangeLogItems;

  protected async override Task OnInitAsync()
  {
      await base.OnInitAsync();
      try
      {
          var changeLogItems = await httpClient.GetStringAsync("data/changelog.json");
          ChangeLogItems = Json.Deserialize<ChangeLog[]>(changeLogItems) ;
          Console.WriteLine($"Got {ChangeLogItems} ChangeLogItems");
      }
      catch (Exception e)
      {
          Console.WriteLine($"ERROR: {e.GetBaseException().Message}");
      }
  }

  //
}