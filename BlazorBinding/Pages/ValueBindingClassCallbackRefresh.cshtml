@page "/vbccr"
@inherits BlazorComponent

<h2>Value Binding a Class object With Callback - "Two Way Class Binding - With Refresh"</h2>

<div class="card">
    <h5 class="card-header">This is the parent control with <span class="badge badge-primary badge-pill @StateHasChangedCss">@(data?.Count)</span> items.</h5>
    <div class="card-body">
        <p class="card-text">Try adding a new user, it should add them to the list.</p>
        <div class="form-group callout-parent @StateHasChangedCss">
            <label for="parent">New User : </label>
            <!-- Parent level button -->
            <button class="btn btn-primary" id="parent" onclick="@AddNewUser">New User</button>
            <!-- /Parent level button -->
        </div>
        <div class="callout-parent">
            <label for="last_change">Last Change : </label>
            <p class="@StateHasChangedCss">@LastChange</p>
        </div>
        <div class="@AddingNewUser">
            <div class="input-group mb-3">
                <input bind=@localName
                       type="text"
                       class="form-control"
                       placeholder="Username"
                       aria-label="Username" />
            </div>
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="basic-addon1">@@</span>
                </div>
                <input bind=@localNick
                       type="text"
                       class="form-control"
                       placeholder="Nickname"
                       aria-label="Nickname"
                       aria-describedby="basic-addon1" />
            </div>
            <div>
                <button class="btn btn-success" onclick=@AddNewUserConfirm>Confirm</button>
                <button class="btn btn-danger" onclick=@AddNewUserCancel>Cancel</button>
            </div>
        </div>
        <DisplayCode Code="@(new[]{
            "<div class=\"@AddingNewUser\">",
            "    <div class=\"input-group mb-3\">",
            "        <input bind=@localName",
            "               type=\"text\"",
            "               class=\"form-control\"",
            "               placeholder=\"Username\"",
            "               aria-label=\"Username\" />",
            "    </div>",
            "    <div class=\"input-group mb-3\">",
            "        <div class=\"input-group-prepend\">",
            "            <span class=\"input-group-text\" id=\"basic-addon1\">@@</span>",
            "        </div>",
            "        <input bind=@localNick",
            "               type=\"text\"",
            "               class=\"form-control\"",
            "               placeholder=\"Nickname\"",
            "               aria-label=\"Nickname\"",
            "               aria-describedby=\"basic-addon1\" />",
            "    </div>",
            "    <div>",
            "        <button class=\"btn btn-success\" onclick=@AddNewUserConfirm>Confirm</button>",
            "        <button class=\"btn btn-danger\" onclick=@AddNewUserCancel>Cancel</button>",
            "    </div>",
            "</div>",
            })" />
    </div>
</div>


<div class="card">
    <h5 class="card-header">This is the Child control with <span class="badge badge-primary badge-pill @StateHasChangedCss">@(data?.Count)</span> items.</h5>
    <div class="card-body">
        @*<p class="card-text">Try editing a user - <i>it will update the parent control</i>.</p>*@
        <div class="form-group callout-child @StateHasChangedCss">
            <!-- Child level component -->
            <ListView bind-ListData="@data" ChangeAction="@ListItemChanged" TList="SampleUserData">
                <ListItemContent>
                    <h6>@context.Name ( @($"@{context.NickName}") )</h6>
                </ListItemContent>
            </ListView>
            <!-- /Child level component -->
        </div>
        <DisplayCode Code="@(new[]{
            "<ListView bind-ListData=\"@data\" ChangeAction=\"@ListItemChanged\" TList=\"SampleUserData\">",
            "    <ListItemContent>",
            "        <h6>@context.Name @($\"@{context.NickName}\")</h6>",
            "    </ListItemContent>",
            "</ListView>",
            })"/>
        <p class="card-text">The ListView implementation : </p>
        <DisplayCode Code="@(new[]{
            "@inherits BlazorComponent",
            "@typeparam TList",
            "",
            "@if (ListData == null)",
            "{",
            "    <div>Nothing to display</div>",
            "}",
            "else",
            "{",
            "    foreach (var listItem in ListData)",
            "    {",
            "        <div class=\"list-group-sm\">",
            "            <button onclick=\"@(e => SelectItem(listItem) )\" class=\"list-group-item list-group-item-action @GetActive(listItem)\">",
            "                <div class=\"input-group\">",
            "                    <span class=\"d-flex w-50 justify-content-between col\">",
            "                        @ListItemContent(listItem)",
            "                    </span>",
            "                    <button class=\"btn btn-sm btn-danger\" onclick=@(e => DeleteItem(listItem))>X</button>",
            "                </div>",
            "            </button>",
            "        </div>",
            "    }",
            "}",
            })"/>
        <DisplayCode Language="CSharp" 
            Code="@(new[]{
            "@functions {",
            "  TList activeItem;",
            "",
            "  [Parameter] protected List<TList> ListData { get;  set; }",
            "  [Parameter] protected Action<List<TList>> ListDataChanged { get; set; }",
            "  [Parameter] protected Action<TList,string> ChangeAction { get; set; }",
            "  [Parameter] protected RenderFragment<TList> ListItemContent { get; set; }",
            "",
            "  string GetActive(TList item)",
            "  {",
            "      return item?.Equals(activeItem) ?? false ? \"active\" : \"\";",
            "  }",
            "",
            "  void SelectItem(TList item)",
            "  {",
            "      activeItem = item;",
            "      ChangeAction?.Invoke(item, \"Selected\");",
            "      StateHasChanged();",
            "  }",
            "",
            "  void DeleteItem(TList item)",
            "  {",
            "      if (item.Equals(activeItem))",
            "          activeItem = default(TList);",
            "      ListData.Remove(item);",
            "      ChangeAction?.Invoke(item, \"Deleted\");",
            "      StateHasChanged();",
            "  }",
            "}",
            })"/>
    </div>
</div>
<div class="card">
    <h5 class="card-header">Invoking StateHasChanged</h5>
    <div class="card-body">
        <div class="row">
            <div class="col-sm-4">
                <div class="alert alert-info">
                    <span class="@StateHasChangedCss">Last refresh @DateTime.Now</span>
                </div>
            </div>
            <div class="col-sm-8">
                <button id="refresh" onclick="@Refresh" class="btn btn-standard">Refresh</button>
            </div>
        </div>
        <p class="card-text">
            Now click the button to refresh this page - Nothing will change except the Last Refresh time, <br />
            because <b>we are propogating the value change from child to parent and raising a Refresh</b>
        </p>
        <p class="card-text">
            Page implementation:
        </p>
        <DisplayCode Language="CSharp"
            Code="@(new[]{
            "@functions {",
            "  string LastChange;",
            "  string AddingNewUser = \"d-none\";",
            "  string localName = \"\";",
            "  string localNick = \"\";",
            "  static List<SampleUserData> data = new List<SampleUserData>();",
            "",
            "  void ListItemChanged(ISampleData item,string action)",
            "  {",
            "      LastChange = $\"User {item.Name} was {action} at {DateTime.Now}\";",
            "      PingState = !PingState;",
            "      StateHasChanged();",
            "  }",
            "",
            "  void AddNewUser(UIMouseEventArgs args)",
            "  {",
            "      AddingNewUser = \"\";",
            "      PingState = !PingState;",
            "      StateHasChanged();",
            "  }",
            "  void AddNewUserConfirm(UIMouseEventArgs args)",
            "  {",
            "      if (string.IsNullOrWhiteSpace(localName) ||",
            "          string.IsNullOrWhiteSpace(localNick) ||",
            "          data.Any(x => x.NickName.Equals(localNick, StringComparison.InvariantCultureIgnoreCase)))",
            "          return;",
            "",
            "      var newUser = new SampleUserData(localName, localNick);",
            "      localName = \"\";",
            "      localNick = \"\";",
            "",
            "      data.Add(newUser);",
            "      ListItemChanged(newUser, \"Added\");",
            "      AddingNewUser = \"d-none\";",
            "      StateHasChanged();",
            "  }",
            "  void AddNewUserCancel(UIMouseEventArgs args)",
            "  {",
            "      AddingNewUser = \"d-none\";",
            "      PingState = !PingState;",
            "      StateHasChanged();",
            "  }",
            "}",
            })" />
    </div>
</div>

@functions
{
    bool PingState;

    void Refresh(UIMouseEventArgs args) => StateHasChanged();

    string StateHasChangedCss => PingState ? "ping-on" : "ping-off";

    string LastChange;
    string AddingNewUser = "d-none";
    string localName = "";
    string localNick = "";
    static List<SampleUserData> data = new List<SampleUserData>() { new SampleUserData("Test1", "TimmyTester") };

    void ListItemChanged(ISampleData item,string action)
    {
        LastChange = $"User {item.Name} was {action} at {DateTime.Now}";
        PingState = !PingState;
        StateHasChanged();
    }

    void AddNewUser(UIMouseEventArgs args)
    {
        AddingNewUser = "";
        PingState = !PingState;
        StateHasChanged();
    }
    void AddNewUserConfirm(UIMouseEventArgs args)
    {
        if (string.IsNullOrWhiteSpace(localName) ||
            string.IsNullOrWhiteSpace(localNick) ||
            data.Any(x => x.NickName.Equals(localNick, StringComparison.InvariantCultureIgnoreCase)))
            return;

        var newUser = new SampleUserData(localName, localNick);
        localName = "";
        localNick = "";

        data.Add(newUser);
        ListItemChanged(newUser, "Added");
        AddingNewUser = "d-none";
        StateHasChanged();
    }
    void AddNewUserCancel(UIMouseEventArgs args)
    {
        AddingNewUser = "d-none";
        PingState = !PingState;
        StateHasChanged();
    }
}
