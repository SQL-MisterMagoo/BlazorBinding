@page "/cc"
<h2>Cascading Value With Callback - "Two Way Binding"</h2>
<div class="card">
    <h5 class="card-header">This is the parent control</h5>
    <div class="card-body">
        <p class="card-text">Try clicking the checkbox - the second checkbox will also change because of the CascadingValue.</p>
        <div class="form-group callout-parent @StateHasChangedCss">
            <label for="parent">Click me (parent control)</label>
            <!-- Parent level checkbox -->
            <input id="parent" type="checkbox" @bind="@ParentValue" />
            <!-- /Parent level checkbox -->
        </div>
        <DisplayCode>
            @("<input id=parent type=checkbox bind=@ParentValue />")
        </DisplayCode>
    </div>
</div>

<div class="card">
    <h5 class="card-header">This is the Child control</h5>
    <div class="card-body">
        <p class="card-text">This is the child control, try clicking the checkbox - <i>it will update the parent Value.</i></p>
        <div class="form-group callout-child @StateHasChangedCss">
            <!-- Child Level Checkbox -->
            <CascadingValue Value="@ParentValue" Name="ParentValue">
                <CheckBox2  Callback="@UpdateValue" />
            </CascadingValue>
            <!-- /Child Level Checkbox -->
        </div>
        <DisplayCode>
            @("<CascadingValue Name=\"ParentValue\" Value=\"@ParentValue\">")
            @(" <span>This is the child control, try clicking the checkbox - <i>it will update the parent Value</i></span>")
            @(" <CheckBox2 ")<b>@("Callback=\"@UpdateValue\" />")</b>
            @("</CascadingValue>")
        </DisplayCode>

        <p class="card-text">
            The CheckBox2 implementation :
        </p>
        <p class="card-text">
            Here we bind to a local proxy value so we can fire the Callback when the local value changes
        </p>
        <DisplayCode>
            @("<input type=\"checkbox\" @bind=\"@Value\" />")
            @("@functions {")
            @("[CascadingParameter(Name =\"ParentValue\")] bool ParentValue { get; set; }")
            <b>
                @("bool Value { get { return ParentValue; } set { Callback?.Invoke(value); } }")
                @("[Parameter] protected Action<bool> Callback { get; set; }")
            </b>
            @("}")
        </DisplayCode>
    </div>
</div>
<div class="card">
    <h5 class="card-header">Invoking StateHasChanged</h5>
    <div class="card-body">
        <div class="row">
            <div class="col-sm-4">
                <div class="alert alert-info">
                    <span class="@StateHasChangedCss">Last refresh @DateTime.Now</span>
                </div>
            </div>
            <div class="col-sm-8">
                <button id="refresh" @onclick="@Refresh" class="btn btn-standard">Refresh</button>
            </div>
            <p class="card-text">
                Now click the button to refresh this page - nothing will change except the Last Refresh time, because the
                Callback has already updated this parent page.
            </p>
        </div>
        <DisplayCode>
            @("<button id=\"refresh\" @onclick=\"@Refresh\" class=\"btn btn-standard\">Refresh</button>")
        </DisplayCode>
        <p class="card-text">
            Page implementation:
        </p>
        <DisplayCode>
            @("@functions {")
            @("bool ParentValue;")
            @("void Refresh(UIMouseEventArgs args) => StateHasChanged();")
            <b>@("void UpdateValue(bool value) { ParentValue = value; Refresh(null); }")</b>
            @("}")
        </DisplayCode>
    </div>
</div>

@functions
{

    bool ParentValue;

    void Refresh(UIMouseEventArgs args) => StateHasChanged();

    void UpdateValue(bool value) { ParentValue = value; Refresh(null); }

    string StateHasChangedCss => ParentValue ? "ping-on" : "ping-off";

}
