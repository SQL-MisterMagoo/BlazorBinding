@page "/cc"
@inherits CascadeCallbackModel

<h2>Cascading Value With Callback - "Two Way Binding"</h2>
<div class="card">
    <h5 class="card-header">This is the parent control</h5>
    <div class="card-body">
        <p class="card-text">Try clicking the checkbox - the second checkbox will also change because of the CascadingValue.</p>
        <div class="form-group callout-parent @StateHasChangedCss">
            <label for="parent">Click me (parent control)</label>
            <!-- Parent level checkbox -->
            <input id="parent" type="checkbox" @bind="@ParentValue" />
            <!-- /Parent level checkbox -->
        </div>
        <DisplayCode Code="@(new[]{ "<input id='parent' type='checkbox' bind='@ParentValue' />"})"/>
    </div>
</div>

<div class="card" >
    <h5 class="card-header">This is the Child control</h5>
    <div class="card-body">
        <p class="card-text">This is the child control, try clicking the checkbox - <i>it will update the parent Value.</i></p>
        <div class="form-group callout-child @StateHasChangedCss">
            <!-- Child Level Checkbox -->
            <CascadingValue Name="ParentValue" Value="@this">
               <CheckBox2 Callback="UpdateValue"/>
            </CascadingValue>
            <!-- /Child Level Checkbox -->
        </div>
        <DisplayCode Code="@(new []{
            "<CascadingValue Name=\"ParentValue\" Value=\"@ParentValue\">",
            "   <CheckBox2 Callback=\"UpdateValue\"/>",
            "</CascadingValue>",
            })"/>
        <p class="card-text">
            The CheckBox2 implementation :
        </p>
        <p class="card-text">
            Here we bind to a local proxy value so we can fire the Callback when the local value changes
        </p>
        <DisplayCode Code="@(new[] {"<input type='checkbox' bind='@Value' />"})" />
        <DisplayCode Language="CSharp" 
            Code="@(new[]{"@functions",
            "{" ,
            " [Parameter] public Action<bool> Callback { get; set; }" ,
            " [CascadingParameter(Name =\" ParentValue\")] bool ParentValue { get; set; }",
            " bool Value { get { return ParentValue; } set { Callback?.Invoke(value); } }" ,
            "}" ,
            })" />
    </div>
</div>
<p>
    Page implementation:
</p>
<DisplayCode Language="CSharp" Code="@(new[]{
    "@functions",
    "{",
    " bool ParentValue;",
    " void Refresh(MouseEventArgs args) => StateHasChanged();",
    " void UpdateValue(bool value) { ParentValue = value; Refresh(null); }",
    "}",
    })" />

@*<div>
    <h3>Event List (@EventList.Count)</h3>
    @GetEvents()
</div>*@