@page "/vb"

<h2>Value Binding - "One Way Value Passing"</h2>

<div class="card">
    <h5 class="card-header">This is the parent control</h5>
    <div class="card-body">
        <p class="card-text">Try clicking the checkbox - the second checkbox will also change because of the Value parameter.</p>
        <div class="form-group callout-parent @StateHasChangedCss">
            <label for="parent">Click me (parent control)</label>
            <!-- Parent level checkbox -->
            <input id="parent" type="checkbox" @bind="@ParentValue" />
            <!-- /Parent level checkbox -->
        </div>
        <DisplayCode Code="@(new[]{
            "<input id=\"parent\" type=\"checkbox\" bind=\"@ParentValue\" />"
            })"/>
    </div>
</div>

<div class="card">
    <h5 class="card-header">This is the Child control</h5>
    <div class="card-body">
        <p class="card-text">Try clicking the checkbox - it will <b class="text-danger">not</b> update the parent Value.</p>
        <div class="form-group callout-child @StateHasChangedCss">
            <!-- Child level checkbox -->
            <CheckBox5 @bind-Value="@ParentValue" />
            <!-- /Child level checkbox -->
        </div>
        <DisplayCode Code="@(new[]{
            " <CheckBox5 bind-Value=\"@ParentValue\" />"
            })"/>
        <p class="card-text">The CheckBox5 implementation : </p>
        <p class="card-text">The "ValueChanged" Action is <b>required</b> by the Blazor engine because we are using the bind-Value syntax.</p>
        <DisplayCode Code="@(new[]{
            "<input type=\"checkbox\" bind=\"@Value\" />"
            })"/>
        <DisplayCode Language="CSharp" 
            Code="@(new[]{
            "@functions {",
            "  [Parameter] public bool Value { get; set; }",
            "  [Parameter] public Action<bool> ValueChanged { get; set; })",
            "}",
            })"/>
    </div>
</div>


<div class="card">
    <h5 class="card-header">Invoking StateHasChanged</h5>
    <div class="card-body">
        <div class="row">
            <div class="col-sm-4">
                <div class="alert alert-info">
                    <span class="@StateHasChangedCss">Last refresh @DateTime.Now</span>
                </div>
            </div>
            <div class="col-sm-8">
                <button id="refresh" @onclick="@Refresh" class="btn btn-standard">Refresh</button>
            </div>
        </div>
        <p class="card-text">
            Now click the button to refresh this page - the child checkbox will revert back to match the parent value<br />
            because we are doing nothing to propogate the value change from child to parent<br />
            and Blazor does not do it for us, despite requiring the ValueChanged Action.
        </p>
        <DisplayCode Code="@(new[]{
            "<button id=\"refresh\" onclick=\"@Refresh\" class=\"btn btn-standard\">Refresh</button>",
            })"/>
    </div>
</div>
<p>
    Page implementation:
</p>
<DisplayCode Language="CSharp" 
    Code="@(new[]{
    "@functions {",
    "bool ParentValue;",
    "void Refresh(MouseEventArgs args) => StateHasChanged();",
    "}",
    })"/>

@functions
{

    bool ParentValue;
    void Refresh(MouseEventArgs args) => StateHasChanged();
    string StateHasChangedCss => ParentValue ? "ping-on" : "ping-off";

}
