@inherits BlazorComponent
<div class="container">
    <div class="row">
        <div class="form-group">
            <input class="form-control" value="@data" oninput="@InputChanged" onkeyup="@KeyPress" autofocus="autofocus" onblur="@HideDropdown" />
            @if (suggestions?.Count > 0)
            {
            <div class="btn-group show" tabindex="-1">
                <div class="dropdown-menu show">
                    @foreach (var item in suggestions)
                    {
                        <button onclick="@(e => SelectItem(item) )" class="dropdown-item py-0 @item.Selected">
                            <div class="input-group">
                                <span class="d-flex w-50 justify-content-between col">
                                    @ListItemContent(item)
                                </span>
                            </div>
                        </button>
                    }
                </div>
            </div>
            }
        </div>
    </div>
</div>

@functions
{
  [Parameter] protected IEnumerable<string> AllowedValues { get; set; }
  [Parameter] protected RenderFragment<SuggestionItems> ListItemContent { get; set; }

  List<SuggestionItems> suggestions;
  string data;
  Task worker;

  async Task HideDropdown(UIFocusEventArgs args)
  {
      suggestions.Clear();
      await Task.FromResult(true);
  }

  async Task InputChanged(UIChangeEventArgs args)
  {
      await ProcessInput(args.Value.ToString());
  }

  async Task KeyPress(UIKeyboardEventArgs args)
  {
      Console.WriteLine(args.Code);
      if (suggestions?.Count == 0)
          return;
      if (args.Code == "ArrowDown")
          await SelectNextItem();
      if (args.Code == "ArrowUp")
          await SelectPrevItem();
      if (args.Code == "Enter")
          await HideDropdown(null);
  }

  async Task SelectItem(SuggestionItems item)
  {
      suggestions.ForEach(s => s.Selected = "");
      item.Selected = "active";
      await Task.FromResult(true);
  }

  async Task SelectNextItem()
  {
      int last = -1;
      for (int i = 0; i < suggestions.Count; i++)
      {
          var sugg = suggestions[i];
          if (sugg.Selected?.Length > 0)
          {
              sugg.Selected = "";
              last = i;
              break;
          }
      }
      last++;
      if (last >= suggestions.Count)
      {
          last = 0;
      }
      suggestions[last].Selected = "active";
      data = suggestions[last].Title;
      await Task.FromResult(true);
  }

  async Task SelectPrevItem()
  {
      int last = suggestions.Count;
      for (int i = 0; i < suggestions.Count; i++)
      {
          var sugg = suggestions[i];
          if (sugg.Selected?.Length > 0)
          {
              sugg.Selected = "";
              last = i;
              break;
          }
      }
      last--;
      if (last < 0)
      {
          last = suggestions.Count;
      }
      suggestions[last].Selected = "active";
      data = suggestions[last].Title;
      await Task.FromResult(true);
  }

  async Task ProcessInput(string value)
  {
      Console.WriteLine($"There are {AllowedValues?.Count()} values and we want to find {value}");
      suggestions = AllowedValues
        .OrderBy(s=>s)
        .Where(s => s?.StartsWith(value, StringComparison.OrdinalIgnoreCase) ?? false)
        .Select(s => new SuggestionItems() { Value = s, Title = s })
        .ToList();
      //StateHasChanged();
      await Task.FromResult(true);
  }

  public class SuggestionItems
  {
      public string Value;
      public string Selected;
      public string Title;
      public override string ToString()
      {
          return Title;
      }
  }
}