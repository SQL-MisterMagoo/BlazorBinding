@inherits BlazorComponent
@typeparam TList

@if (ListData == null)
{
    <div>Nothing to display</div>
}
else
{
    foreach (var listItem in ListData)
    {
        <div class="list-group-sm">
            <button onclick="@(e => SelectItem(listItem) )" class="list-group-item list-group-item-action @GetActive(listItem)">
                <div class="input-group">
                    <span class="d-flex w-50 justify-content-between col">
                        @ListItemContent(listItem)
                    </span>
                    <button class="btn btn-sm btn-danger" onclick=@(e => DeleteItem(listItem))>X</button>
                </div>
            </button>
        </div>
    }
}

@functions
{
TList activeItem;

[Parameter] protected List<TList> ListData { get; set; }
[Parameter] protected Action<List<TList>> ListDataChanged { get; set; }
[Parameter] protected Action<TList, string> ChangeAction { get; set; }
[Parameter] protected RenderFragment<TList> ListItemContent { get; set; }

string GetActive(TList item)
{
    return item?.Equals(activeItem) ?? false ? "active" : "";
}

void SelectItem(TList item)
{
    activeItem = item;
    ChangeAction?.Invoke(item, "Selected");
    StateHasChanged();
}

void DeleteItem(TList item)
{
    if (item.Equals(activeItem))
        activeItem = default(TList);
    ListData.Remove(item);
    ChangeAction?.Invoke(item, "Deleted");
    StateHasChanged();
}
}