
<div class="@Classes" tabindex="-1" role="dialog" style="@Styles" ref="mmdialogref">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                @if (TitleText == null)
                {
                    <h5 class="modal-title">@TitleContent</h5>
                }
                else
                {
                    <h5 class="modal-title">@(TitleText ?? "Message")</h5>
                }
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="@CloseDialog">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @if (BodyText == null)
                {
                    <p>@BodyContent</p>
                }
                else
                {
                    <div style="word-wrap:normal;white-space:pre-wrap;">@BodyText</div>
                }
            </div>
            <div class="modal-footer">
                @if (BtnPriText == null && BtnPriContent != null)
                {
                    <button type="button" class="btn btn-primary" @onclick="@BtnPriClickInternal">@BtnPriContent</button>
                }
                else if (!string.IsNullOrWhiteSpace(BtnPriText))
                {
                    <button type="button" class="btn btn-primary" @onclick="@BtnPriClickInternal">@BtnPriText</button>
                }
                @if (BtnSecText == null && BtnSecContent != null)
                {
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="@BtnSecClickInternal">@BtnSecContent</button>
                }
                else if (!string.IsNullOrWhiteSpace(BtnSecText))
                {
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="@BtnSecClickInternal">@BtnSecText</button>
                }
            </div>
        </div>
    </div>
</div>

@code
{

  [Parameter] protected RenderFragment TitleContent { get; set; }
  [Parameter] protected RenderFragment BodyContent { get; set; }
  [Parameter] protected RenderFragment BtnPriContent { get; set; }
  [Parameter] protected RenderFragment BtnSecContent { get; set; }
  [Parameter] protected Action<UIMouseEventArgs> BtnPriClick { get; set; }
  [Parameter] protected Action<UIMouseEventArgs> BtnSecClick { get; set; }

  ElementRef mmdialogref;
  string Classes = "modal fade";
  string Styles = "display: none;";
  string TitleText;
  string BodyText;
  string BtnPriText;
  string BtnSecText;

  #region "Public Actions"
  public void Show()
  {
      Classes = "modal fade show";
      Styles = "display: block; padding-right: 17px;";
      Console.WriteLine("SHOW");
      StateHasChanged();
  }
  public void Hide()
  {
      Classes = "modal fade";
      Styles = "display: none;";
      StateHasChanged();
  }
  #endregion

  #region "Internal Actions"
  protected void BtnPriClickInternal(UIMouseEventArgs args)
  {
      if (BtnPriClick == null)
      {
          Console.WriteLine("Primary Button Self Closing");
          Hide();
      }
      else
      {
          Console.WriteLine("Primary Button Invoke");
          BtnPriClick.Invoke(args);
      }
  }
  protected void BtnSecClickInternal(UIMouseEventArgs args)
  {
      if (BtnSecClick == null)
      {
          Console.WriteLine("Secondary Button Self Closing");
          Hide();
      }
      else
      {
          Console.WriteLine("Secondary Button Invoke");
          BtnSecClick.Invoke(args);
      }
  }
  protected void CloseDialog(UIMouseEventArgs args)
  {
      Console.WriteLine("Close Button");
      Hide();
  }
  #endregion

  #region "Public Setters"
  public void SetTitle(string Title)
  {
      Console.WriteLine($"New Title: {Title}");
      TitleText = Title;
  }
  public void SetBody(string Body)
  {
      Console.WriteLine($"New Body: {Body}");
      BodyText = Body;
  }
  public void SetBtnPriText(string Btn)
  {
      Console.WriteLine($"New Pri: {Btn}");
      BtnPriText = Btn;
  }
  public void SetBtnSecText(string Btn)
  {
      Console.WriteLine($"New Sec: {Btn}");
      BtnSecText = Btn;
  }
  public void SetBtnPriCallback(Action<UIMouseEventArgs> Callback)
  {
      BtnPriClick = Callback;
  }
  public void SetBtnSecCallback(Action<UIMouseEventArgs> Callback)
  {
      BtnSecClick = Callback;
  }
  #endregion

  protected override void OnInit()
  {
      if (TitleContent == null && TitleText == null) SetTitle("Information");
      if (BodyContent == null && BodyText == null) SetBody("This is a sample dialog, with default values.");
      if (BtnPriText == null && BtnPriText == null) SetBtnPriText("OK");
      if (BtnSecText == null && BtnSecText == null) SetBtnSecText("Cancel");
  }
  //
}
